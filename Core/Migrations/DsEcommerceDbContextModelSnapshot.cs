// <auto-generated />
using System;
using Core.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(DsEcommerceDbContext))]
    partial class DsEcommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommandeArticle", b =>
                {
                    b.Property<string>("Numcommande")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("numcommande");

                    b.Property<string>("Codearticle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("codearticle");

                    b.HasKey("Numcommande", "Codearticle")
                        .HasName("pk_commande_article");

                    b.HasIndex("Codearticle");

                    b.ToTable("commandeArticle", (string)null);
                });

            modelBuilder.Entity("Core.Model.Article", b =>
                {
                    b.Property<string>("Codearticle")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("codearticle");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Numcommande")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("numcommande");

                    b.Property<decimal?>("Prix")
                        .HasPrecision(20, 3)
                        .HasColumnType("numeric(20,3)")
                        .HasColumnName("prix");

                    b.Property<decimal?>("Quantite")
                        .HasPrecision(20, 3)
                        .HasColumnType("numeric(20,3)")
                        .HasColumnName("quantite");

                    b.HasKey("Codearticle")
                        .HasName("pk_article");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("Core.Model.Commande", b =>
                {
                    b.Property<string>("Numcommande")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("numcommande");

                    b.Property<DateTime?>("Datecommande")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datecommande");

                    b.Property<DateTime?>("Datelivraison")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datelivraison");

                    b.Property<decimal?>("Prixttc")
                        .HasPrecision(20, 3)
                        .HasColumnType("numeric(20,3)")
                        .HasColumnName("prixttc");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("userid");

                    b.HasKey("Numcommande")
                        .HasName("pk_commande");

                    b.HasIndex("Userid");

                    b.ToTable("commande", (string)null);
                });

            modelBuilder.Entity("Core.Model.User", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("userid");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("img");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Userid")
                        .HasName("pk_user");

                    b.HasIndex(new[] { "Password" }, "user_password_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("CommandeArticle", b =>
                {
                    b.HasOne("Core.Model.Article", null)
                        .WithMany()
                        .HasForeignKey("Codearticle")
                        .IsRequired()
                        .HasConstraintName("fk_commande_article_article");

                    b.HasOne("Core.Model.Commande", null)
                        .WithMany()
                        .HasForeignKey("Numcommande")
                        .IsRequired()
                        .HasConstraintName("fk_commande_article_commande");
                });

            modelBuilder.Entity("Core.Model.Commande", b =>
                {
                    b.HasOne("Core.Model.User", "User")
                        .WithMany("Commandes")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("fk_commande_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.User", b =>
                {
                    b.Navigation("Commandes");
                });
#pragma warning restore 612, 618
        }
    }
}
